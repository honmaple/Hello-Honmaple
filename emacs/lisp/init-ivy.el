(require-package 'swiper)
(require-package 'counsel)

(require 'ivy)
(require 'counsel)
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
(setq ivy-height 10)
; (setq ivy-count-format "(%d/%d) ")
; (global-set-key "\C-s" 'swiper)
; (global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(define-key ivy-minibuffer-map (kbd "C-j") 'ivy-next-line)
(define-key ivy-minibuffer-map (kbd "C-k") 'ivy-previous-line)
(define-key ivy-mode-map [escape] 'minibuffer-keyboard-quit)

(defun eh-ivy-partial-or-done ()
  (interactive)
  (or (ivy-partial)
      (ivy-alt-done)))
(define-key ivy-minibuffer-map (kbd "TAB") 'eh-ivy-partial-or-done)
(define-key ivy-minibuffer-map (kbd "<tab>") 'eh-ivy-partial-or-done)

(defun nadvice/ivy-read (old-fun &rest args)
    (let ((resize-mini-windows nil))
      (apply old-fun args)))
(advice-add 'ivy-read :around #'nadvice/ivy-read)
(provide 'init-ivy)
