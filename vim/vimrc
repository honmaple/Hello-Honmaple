scriptencoding utf-8
set nocompatible
set viminfo+=n$HOME/.vim/viminfo

let g:username = 'honmaple'
let g:email = 'mail@honmaple.com'
let g:is_gui = has('gui_running')
let g:is_mac = has('macunix')
let g:is_linux = has('unix') && !has('macunix') && !has('win32unix')
let g:is_windows = has('win32') || has('win64')

let mapleader = ','                             " 修改leader键
let g:mapleader = ','

syntax on                                       " 代码高亮
filetype on                                     " 启用文件类型侦测
filetype plugin on                              " 针对不同的文件类型加载对应的插件
filetype plugin indent on                       " 启用缩进
set t_Co=256

set number                                      " 显示行号
set relativenumber number                       " 设置相对行号
set mouse=a                                     " 任何模式下启用鼠标
set mousehide                                   " Hide the mouse cursor while typing
set backspace=indent,eol,start                  " Backspace for dummies
set linespace=0                                 " No extra spaces between rows
set shiftwidth=4                                " 换行时自动缩进宽度，可更改（宽度同tabstop）
set expandtab                                   " 将Tab键转换为空格
set tabstop=4                                   " 设置Tab键的宽度，可以更改，如：宽度为2

set shortmess+=filmnrxoOtT                      " 去掉欢迎界面
set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
set virtualedit=onemore                         " Allow for cursor beyond last character
set history=1000                                " Store a ton of history (default is 20)
set iskeyword+=_,$,@,%,#,-                      " 带有如下符号的单词不要被换行分割

set hidden                                      " Allow buffer switching without saving
set nobackup                                    " 禁止生成临时文件
set noswapfile
set nowrap                                      " 设置不自动换行
set autoindent                                  " 打开自动缩进

set cuc                                         " 高亮光标所在列
set cursorline                                  " 高亮光标所在行
set colorcolumn=80
set ruler                                       " 右下角显示光标位置的状态行
set showcmd                                     " 在状态栏显示正在输入的命令
set laststatus=2                                " 启用状态栏信息
set statusline=%<%f\ %w%h%m%r\ [%{&ff}/%Y]\ [%{getcwd()}]\ %=%-14.(%l,%c%V%)\ %p%%

set scrolloff=10                                " 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set showmatch                                   " 高亮显示匹配的括号
set incsearch                                   " 在输入要搜索的文字时，实时匹配
set hlsearch                                    " 高亮搜索
set ignorecase                                  " 搜索模式里忽略大小写
set smartcase                                   " 如果搜索模式包含大写字符，不使用'ignorecase' 选项，只有在输入搜索模式并且打开 'ignorecase' 选项时才会使用
set completeopt=longest,menu                    " 让vim的补全菜单行为与一般IDE一致(参考VimTip1228)
set wildmenu
set wildmode=list:longest,full                  " 增强模式中的命令行自动完成操作
set whichwrap=b,s,h,l,<,>,[,]                   " Backspace and cursor keys wrap too
set wildignore=*.o,*~,*.pyc,*.class
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:.  " Highlight problematic whitespace

"set smartindent                                " 启用智能对齐方式
"set shiftround                                 " 缩进时，取整
"set showtabline=1                              " 显示标签
set smarttab                                    " 指定按一次backspace就删除shiftwidth宽度
"set foldenable                                 " 启用折叠
"set foldmethod=indent                          " indent 折叠方式
"set foldmethod=syntax
set foldmethod=marker
set nofoldenable                                " 启动 vim 时关闭折叠代码
"set matchtime=5                                " 匹配括号高亮的时间（单位是十分之一秒）
"set autoread                                   " 当文件在外部被修改，自动更新该文件
"set autowrite                                  " 自动保存
"set vb t_vb=                                   " 关闭提示音

"highlight clear SignColumn                     " SignColumn should match background
"highlight clear LineNr                         " Current line number row will have same background color in relative mode
"highlight clear CursorLineNr                   " Remove highlight color from current line number

if has('clipboard')
    if has('unnamedplus')                       " When possible use + register for copy-paste
        set clipboard=unnamed,unnamedplus
    else                                        " On mac and Windows, use * register for copy-paste
        set clipboard=unnamed
    endif
endif

" 插入模式下用绝对行号, 普通模式下用相对
autocmd FocusLost *   :set norelativenumber number
autocmd FocusGained * :set relativenumber
autocmd InsertEnter * :set norelativenumber number
autocmd InsertLeave * :set relativenumber

" 显示/隐藏菜单栏、工具栏、滚动条
if g:is_gui
    set guiheadroom=0
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=L
endif

call plug#begin('~/.vim/plugged')
    " ui
    Plug 'altercation/vim-colors-solarized'
    Plug 'tomasr/molokai'
    " Plug 'spf13/vim-colors'
    Plug 'bling/vim-airline'
    Plug 'powerline/fonts'
    Plug 'luochen1990/rainbow'
    Plug 'Yggdroot/indentLine'
    Plug 'liuchengxu/space-vim-dark'
    Plug 'mhinz/vim-startify'

    " editor
    Plug 'tpope/vim-surround'
    Plug 'jiangmiao/auto-pairs'
    Plug 'vim-scripts/matchit.zip'
    Plug 'gcmt/wildfire.vim'
    Plug 'godlygeek/tabular'
    Plug 'majutsushi/tagbar'
    Plug 'kristijanhusak/vim-multiple-cursors'
    Plug 'tpope/vim-commentary'
    Plug 'Chiel92/vim-autoformat'
    Plug 'thinca/vim-quickrun'
    Plug 'tpope/vim-fugitive'
    Plug 'airblade/vim-gitgutter'

    " file
    Plug 'ctrlpvim/ctrlp.vim'
    Plug 'tacahiroy/ctrlp-funky'
    Plug 'dyng/ctrlsf.vim'
    Plug 'scrooloose/nerdtree'
    Plug 'jistr/vim-nerdtree-tabs'
    Plug 'bling/vim-bufferline'
    Plug 'sjl/gundo.vim'

    " develop
    Plug 'w0rp/ale'
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'
    " Plug 'Shougo/neocomplete.vim'
    Plug 'Valloric/YouCompleteMe'

    " backend
    Plug 'tpope/vim-markdown'
    Plug 'iamcco/markdown-preview.vim'
    Plug 'klen/python-mode'

    " web
    Plug 'groenewege/vim-less'
    Plug 'pangloss/vim-javascript'
    Plug 'briancollins/vim-jst'
    Plug 'kchmck/vim-coffee-script'
    " Plug 'amirh/HTML-AutoCloseTag'
    Plug 'mattn/emmet-vim'
    "Plug 'ap/vim-css-color'
    Plug 'hail2u/vim-css3-syntax'
    Plug 'gorodinskiy/vim-coloresque'
    Plug 'tpope/vim-haml'
call plug#end()

set background=dark
if $TERM=~'cons25'
    colorscheme default
elseif g:is_gui
    " let g:solarized_termcolors=256
    " let g:solarized_termtrans = 0
    " colorscheme solarized
    let g:molokai_original = 1
    colorscheme molokai
else
    let g:solarized_termcolors=256
    let g:solarized_termtrans = 0
    colorscheme molokai
    " colorscheme solarized
endif
" indentLine {
    " 用于显示对齐线
    let g:indentLine_char = "┊"
    let g:indentLine_first_char = "┊"
    " 色块宽度
    "let g:indent_guides_guide_size=1
    " 设置终端对齐线颜色，如果不喜欢可以将其注释掉采用默认颜色
    let g:indentLine_color_term = 256
" }
" vim-airline {
    " let g:airline#extensions#tabline#enabled = 1
    let g:airline_powerline_fonts=1
    if !exists('g:airline_theme')
        let g:airline_theme = 'dark'
    endif
" }
" rainbow {
    let g:rainbow_active = 1
" }

" tagbar {
    "nmap tb :TlistClose<CR>:TagbarToggle<CR>
    let g:tagbar_width=20                       "设置窗口宽度
    let g:tagbar_left=0                         "在左侧窗口中显示
    let g:tagbar_compact=1                      "不显示帮助信息
    "tagbar_map_togglefold 打开tagbar变量  "o"
    " set tags=./tags;
    " 自动切换目录为当前编辑文件所在目录
    " au BufRead,BufNewFile,BufEnter * cd %:p:h
" }
" wildfire {
    let g:wildfire_objects = {
            \ "*" : ["i'", 'i"', "i\)", "i\]", "i\}", "ip","it"],
            \ "html,xml" : ["at","i>",'i"',"i\)"]}
" }
" vim-multiple-cursors {
    " default mapping
    let g:multi_cursor_next_key='<c-n>'
    let g:multi_cursor_prev_key='<c-p>'
    let g:multi_cursor_skip_key='<c-x>'
    let g:multi_cursor_quit_key='<esc>'
" }
" Tabularize {
    " 对齐
    " nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
    " vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
" }
" quickrun {
    let g:quickrun_config = {
    \   "_" : {
    \       "outputter" : "message",
    \   },
    \}
    let g:quickrun_no_default_key_mappings = 1
" }
" vim-fugitive {
    nnoremap <silent> <leader>gs :Gstatus<CR>
    nnoremap <silent> <leader>gd :Gdiff<CR>
    nnoremap <silent> <leader>gc :Gcommit<CR>
    nnoremap <silent> <leader>gb :Gblame<CR>
    nnoremap <silent> <leader>gl :Glog<CR>
    nnoremap <silent> <leader>gp :Git push<CR>
    nnoremap <silent> <leader>gr :Gread<CR>
    nnoremap <silent> <leader>gw :Gwrite<CR>
    nnoremap <silent> <leader>ge :Gedit<CR>
    " Mnemonic _i_nteractive
    nnoremap <silent> <leader>gi :Git add -p %<CR>
    nnoremap <silent> <leader>gg :SignifyToggle<CR>
"}
"vim-gitgutter {
    let g:gitgutter_sign_added = '+'
    let g:gitgutter_sign_modified = '~'
    let g:gitgutter_sign_removed = '-'

    " let g:gitgutter_sign_removed_first_line = '^^'
    " let g:gitgutter_sign_modified_removed = 'ww'
    let g:gitgutter_override_sign_column_highlight = 0
" }
" file-header {
    let g:maple_header_template = [
        \repeat('*', 79),
        \'Copyright © '.strftime('%Y'),
        \'File Name: '.expand('%'),
        \'Author: '.g:username,
        \'Email: '.g:email,
        \'Created: '..strftime('%F %T (%Z)'),
        \'Last Update:',
        \'         By:',
        \'Description:',
        \repeat('*', 79),
        \]

    let g:maple_header_alist = {
        \'py': {
        \    'block': 0,
        \    'prefix': ['#!/usr/bin/env python', '# -*- coding=UTF-8 -*-'],
        \},
        \'go': {
        \    'block': 1,
        \},
        \'c': {
        \    'block': 1,
        \    'suffix': ['#include<stdio.h>', '#include<string.h>'],
        \},
        \'sh': {
        \    'block': 0,
        \    'prefix': ['#!/bin/bash'],
        \},
    \}

    let g:maple_header_update_alist = {
    \'File Name': 's@:.*$@\=": ".expand("%:t")@',
    \'Last Update': 's@:.*$@\=": ".strftime("%A %T (%Z)")@',
    \'By': 's@:.*$@\=": ".g:username@',
    \}

    function! MatchFileType()
        return has_key(g:maple_header_alist, expand('%:e'))
    endfunction

    function! InsertHeader()
        let l:ext = expand('%:e')
        if has_key(g:maple_header_alist, ext) == 0
            return
        endif

        let l:index = 0
        let l:alist = g:maple_header_alist[ext]
        let l:block = get(alist, 'block', 0)
        let l:lines = get(alist, 'prefix', [])
        let l:comment = get(alist, 'comment', '# ')
        let l:template = get(alist, 'template', g:maple_header_template)

        for m in l:template
            if l:block == 1
                if l:index == 0
                    let l:lines = add(l:lines, '/*'.m)
                elseif l:index == len(l:template) - 1
                    let l:lines = add(l:lines, m.'*/')
                else
                    let l:lines = add(l:lines, ' '.m)
                endif
            else
                let l:lines = add(l:lines, l:comment . m)
            endif
            let l:index += 1
        endfor
        call append(0, l:lines + get(l:alist, 'suffix', []))
    endfunction

    function! UpdateHeader()
        let n=1
        while n < 11
            let line = getline(n)
            for m in items(g:maple_header_update_alist)
                if line =~ '^.*'.m[0].':.*$'
                    execute '/'.m[0].'/'.m[1]
                endif
            endfor
            let n = n + 1
        endwhile
    endfunction

    autocmd BufNewFile * if MatchFileType() | exec ":call InsertHeader()" | endif
    "新建文件后，自动定位到文件末尾
    autocmd BufNewFile * normal G
    autocmd BufWrite * if MatchFileType() | exec ":call UpdateHeader()" | endif
" }

" gundo {
    set undodir=~/.vim/.cache/undo
    set undofile
    set undolevels=10         " Maximum number of changes that can be undone
    set undoreload=10        " Maximum number lines to save for undo on a buffer reload
" }

" ctrlp {
    let g:ctrlp_map = '<c-p>'
    let g:ctrlp_cmd = 'CtrlP'
    let g:ctrlp_working_path_mode = 'ra'
    let g:ctrlp_match_window_reversed = 0

    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
        \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
        \ }

    if executable('ag')
        let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
    else
        let s:ctrlp_fallback = 'find %s -type f'
    endif
    if exists("g:ctrlp_user_command")
        unlet g:ctrlp_user_command
    endif
    let g:ctrlp_user_command = {
                \ 'types': {
                \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                \ 2: ['.hg', 'hg --cwd %s locate -I .'],
                \ },
                \ 'fallback': s:ctrlp_fallback
                \ }

" }

" ctrlp-funky {
    " CtrlP extensions
    let g:ctrlp_extensions = ['funky']
    let g:ctrlp_funky_syntax_highlight = 1
" }
" ctrlsf {
    " 工程内查找文件内容,先安装ag /the_silver_searcher
    let g:ctrlsf_ackprg = 'ag'
    nmap     <C-F>f <Plug>CtrlSFPrompt
    vmap     <C-F>f <Plug>CtrlSFVwordPath
    vmap     <C-F>F <Plug>CtrlSFVwordExec
    nmap     <C-F>n <Plug>CtrlSFCwordPath
    nmap     <C-F>p <Plug>CtrlSFPwordPath
" }

" NerdTree {
    " 自动开启nerdtree
    let g:nerdtree_tabs_open_on_console_startup = 0
    let g:nerdtree_tabs_open_on_gui_startup = 0
    "当打开vim且没有文件时自动打开NERDTree
    " if !g:is_gui
    "     autocmd StdinReadPre * let s:std_in=1
    "     autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
    " endif
    "显示文件
    let NERDTreeShowFiles=1
    let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
    "显示隐藏文件
    let NERDTreeShowHidden=0
    let NERDTreeChDirMode=0
    let NERDTreeQuitOnOpen=1
    let NERDTreeMouseMode=2
    let NERDTreeKeepTreeInNewTab=1
    let NERDTreeWinSize=22
    let NERDTreeWinPos="left"
    "高亮显示当前文件或目录
    let NERDTreeHightCursorline=1
    "不显示'Bookmarks' label 'Press ? for help'
    let NERDTreeMinimalUI=1
    " s/v 分屏打开文件
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'
" }

" ale {
    let g:ale_linters = {
                    \   'sh' : ['shellcheck'],
                    \   'html' : ['tidy'],
                    \   'python' : ['flake8'],
                    \   'markdown' : ['mdl'],
                    \   'javascript' : ['eslint'],
                    \}
    let g:ale_sign_column_always = 1
    let g:ale_set_highlights = 0
    let g:ale_sign_error = '>>'
    let g:ale_sign_warning = '--'
    let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
    let g:ale_echo_msg_error_str = 'Error'
    let g:ale_echo_msg_warning_str = 'Warning'
" }

" neocomplete.vim {
    set shortmess+=c
    let g:clang_user_options='|| exit 0'
    let g:ycm_key_list_select_completion = ['<Down>']
    let g:ycm_key_list_previous_completion = ['<Up>']
    let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
    let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
    let g:ycm_use_ultisnips_completer = 1 "提示UltiSnips
    let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全
    let g:ycm_collect_identifiers_from_tags_files = 1
    let g:ycm_seed_identifiers_with_syntax=1   "语言关键字补全, 不过python关键字都很短，所以，需要的自己打开
    let g:ycm_cache_omnifunc=0 " 禁止缓存匹配项,每次都重新生成匹配项
    " 跳转到定义处, 分屏打开
    let g:ycm_goto_buffer_command = 'horizontal-split'
    " nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
    nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
    nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>

    if !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
        let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
    endif

    " YCM 补全菜单配色
    " 菜单
    " highlight Pmenu ctermfg=2 ctermbg=0 guifg=#005f87 guibg=#EEE8D5
    " 选中项
    " highlight PmenuSel ctermfg=2 ctermbg=3 guifg=#AFD700 guibg=#106900
    " 直接触发自动补全 insert模式下
    " let g:ycm_key_invoke_completion = '<C-Space>'
    " 黑名单,不启用
    highlight Pmenu guifg=#C269FE guibg=#34323e
    highlight PmenuSbar guifg=#C269FE guibg=#303030
    highlight PmenuSel guifg=#C269FE guibg=#303030

    let g:ycm_filetype_blacklist = {
                \ 'tagbar' : 1,
                \ 'gitcommit' : 1,
                \ 'nerdtree' : 1
                \}
    "set completeopt-=preview
" }

" ultisnips {
    if isdirectory(expand("~/.vim/bundle/ultisnips/"))
        "let g:UltiSnipsExpandTrigger = '<C-space>'
        "let g:UltiSnipsJumpForwardTrigger = '<Down>'
        "let g:UltiSnipsJumpBackwardTrigger = '<Up>'
        "定义存放代码片段的文件夹 .vim/snippets下，使用自定义和默认的，将会的到全局，有冲突的会提示
        "let g:UltiSnipsSnippetDirectories=['bundle/vim-snippets', 'bundle/ultisnips']
        let g:UltiSnipsSnippetDirectories=['bundle/vim-snippets']

        function! g:UltiSnips_Complete()
            call UltiSnips#ExpandSnippet()
            if g:ulti_expand_res == 0
                if pumvisible()
                    return "\<Down>"
                else
                    call UltiSnips#JumpForwards()
                    if g:ulti_jump_forwards_res == 0
                        return "\<TAB>"
                    endif
                endif
            endif
            return ""
        endfunction

        " autocmd BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
        let g:UltiSnipsJumpForwardTrigger="<tab>"
        "let g:UltiSnipsListSnippets="<c-e>"
        " let g:ulti_expand_res = 1
        " function! Ulti_ExpandOrEnter()
            " call UltiSnips#ExpandSnippet()
            " if g:ulti_expand_res
                " return ''
            " else
                " return "\<return>"
        " endfunction

        " " Set <space> as primary trigger
        " inoremap <return> <C-R>=Ulti_ExpandOrEnter()<CR>
        "回车即选中当前项
        inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
        if has('conceal')
            set conceallevel=2 concealcursor=i
        endif
    endif
" }

" vim-markdown {
    au BufRead,BufNewFile *.{md,mdown,mkd,mkdn,markdown,mdwn} set filetype=markdown
    let g:vim_markdown_folding_disabled=1
    let g:vim_markdown_no_default_key_mappings=1
" }
" MarkDownPreview {
    let g:mkdp_path_to_chrome = "google-chrome-stable"
    let g:mkdp_auto_start = 0
    " 设置为 1 可以在打开 markdown 文件的时候自动打开浏览器预览，只在打开
    " markdown 文件的时候打开一次

    let g:mkdp_auto_open = 0
    " 设置为 1 在编辑 markdown 的时候检查预览窗口是否已经打开，否则自动打开预
    " 览窗口

    let g:mkdp_auto_close = 1
    " 在切换 buffer 的时候自动关闭预览窗口，设置为 0 则在切换 buffer 的时候不
    " 自动关闭预览窗口

    let g:mkdp_refresh_slow = 0
    " 设置为 1 则只有在保存文件，或退出插入模式的时候更新预览，默认为 0，实时
    " 更新预览
" }

" PyMode {
    " Disable if python support not present
    if !has('python') && !has('python3')
        let g:pymode = 0
    endif

    let g:pymode_python = 'python3'
    let g:pymode_lint = 0
    let g:pymode_lint_checkers = ['pyflakes']
    let g:pymode_trim_whitespaces = 1
    let g:pymode_options = 0
    let g:pymode_rope = 0
" }
" python语法实时检查 {
    " python fly check, 弥补syntastic只能打开和保存才检查语法的不足
    "let g:pyflakes_use_quickfix = 0

    " for python.vim syntax highlight
    " let python_highlight_all = 1
" }

" javascript {
    let g:html_indent_inctags = "html,body,head,tbody"
    let g:html_indent_style1 = "inc"
" }
" JSON {
    nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
    let g:vim_json_syntax_conceal = 0
" }
" AutoCloseTag {
    " Make it so AutoCloseTag works for xml and xhtml files as well
    au FileType xhtml,xml ru ftplugin/html/autoclosetag.vim
    nmap <Leader>hh <Plug>ToggleAutoCloseMappings
" }
" emmet {
    " let g:user_emmet_expandabbr_key = '<Tab>'
    " Enable just for html/css
    let g:user_emmet_install_global = 0
    " autocmd FileType html,css EmmetInstall
" }
au BufRead,BufNewFile *.{html,janja,htmljanja} set filetype=html

" keybind {
    nmap <F2>           :NERDTreeToggle<CR>
    nnoremap <Leader>fr :CtrlPMRU<CR>
    nnoremap <Leader>ff :CtrlP<CR>
    nnoremap <Leader>fs :write<CR>
    nnoremap <Leader>bb :CtrlPBuffer<CR>
    nnoremap <leader>bi :TagbarToggle<CR>
    nnoremap <leader>bn :bn<CR>
    nnoremap <leader>bp :bp<CR>
    nnoremap <Leader>sj :CtrlPFunky<Cr>
    nnoremap <Leader>u  :GundoToggle<CR>
    noremap <F5>        :QuickRun<CR>
    noremap <F6>        :Autoformat<CR>
    map <Leader>cc      :Commentary<Cr>
    nmap tb             :TagbarToggle<CR>
    nmap <Leader>a=     :Tabularize /^[^=]*\zs=<CR>
    vmap <Leader>a=     :Tabularize /^[^=]*\zs=<CR>
    " vmap v <Plug>(wildfire-fuel)
    imap jj <Esc>
    nmap <silent> <Leader>ep <Plug>(ale_previous_wrap)
    nmap <silent> <Leader>en <Plug>(ale_next_wrap)
" }
